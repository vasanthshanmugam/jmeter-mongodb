<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="mongoHost" elementType="Argument">
            <stringProp name="Argument.name">mongoHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mongoPort" elementType="Argument">
            <stringProp name="Argument.name">mongoPort</stringProp>
            <stringProp name="Argument.value">27017</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="databaseName" elementType="Argument">
            <stringProp name="Argument.name">databaseName</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="collectionName" elementType="Argument">
            <stringProp name="Argument.name">collectionName</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="connect to mongodb">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import com.mongodb.*;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.connection.ClusterSettings;
import com.mongodb.connection.ClusterSettings.Builder;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import java.util.Arrays;

try {
    // Define MongoDB connection settings
    MongoClientSettings settings = MongoClientSettings.builder()
        .applyToClusterSettings(new Block&lt;ClusterSettings.Builder&gt;() {
            @Override
            public void apply(Builder builder) {
                builder.hosts(Arrays.asList(new ServerAddress(vars.get(&quot;mongoHost&quot;), Integer.parseInt(vars.get(&quot;mongoPort&quot;)))));
            }
        })
        .build();
    
    // Create MongoClient with the settings
    MongoClient mongoClient = MongoClients.create(settings);
    
    // Replace with your actual database and collection names from JMeter variables
    String dbName = vars.get(&quot;databaseName&quot;);
    String collectionName = vars.get(&quot;collectionName&quot;);
    
    // Access the MongoDB database and collection
    MongoDatabase database = mongoClient.getDatabase(dbName);
    MongoCollection&lt;Document&gt; collection = database.getCollection(collectionName);
    
    // Store the collection object in JMeter variables for future use
    vars.putObject(&quot;collection&quot;, collection);
    
    // Return a success message
    return &quot;Connected to &quot; + collectionName + &quot; collection in &quot; + dbName + &quot; database.&quot;;
}
catch (Exception e) {
    // Handle exceptions and set error response
    SampleResult.setSuccessful(false);
    SampleResult.setResponseCode(&quot;500&quot;);
    SampleResult.setResponseMessage(&quot;Exception: &quot; + e.getMessage());
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="read mongodb">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoClient;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.model.Filters;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import java.util.Arrays;

try {
    // Define MongoDB connection settings
    MongoClientSettings settings = MongoClientSettings.builder()
        .applyToClusterSettings({ builder -&gt;
            builder.hosts(Arrays.asList(new ServerAddress(vars.get(&quot;mongoHost&quot;), Integer.parseInt(vars.get(&quot;mongoPort&quot;)))))
        })
        .build();
    
    // Create MongoClient with the settings
    MongoClient mongoClient = MongoClients.create(settings);
    
    // Replace with your actual database and collection names from JMeter variables
    String dbName = vars.get(&quot;databaseName&quot;);
    String collectionName = vars.get(&quot;collectionName&quot;);
    
    // Access the MongoDB database and collection
    MongoDatabase database = mongoClient.getDatabase(dbName);
    MongoCollection&lt;Document&gt; collection = database.getCollection(collectionName);
    
    // Define the query to find the document with specific fields
  /*  Document query = new Document(&quot;name&quot;, &quot;User 1&quot;)
                        .append(&quot;email&quot;, &quot;user1@example.com&quot;)
                        .append(&quot;age&quot;, 21); */

     Document query = new Document(&quot;name&quot;, &quot;User 1&quot;);
    
    // Execute the query
    Document result = collection.find(query).first();
    
    if (result != null) {
        vars.put(&quot;exampleDocumentId&quot;, result.get(&quot;_id&quot;).toString());
        return &quot;Document found: &quot; + result.toJson();
    } else {
        return &quot;Document not found with specified criteria&quot;;
    }
}
catch (Exception e) {
    SampleResult.setSuccessful(false);
    SampleResult.setResponseCode(&quot;500&quot;);
    SampleResult.setResponseMessage(&quot;Exception: &quot; + e.getMessage());
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
